package vn.com.vpbank.chatbot.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.model.ChatModel;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.chat.prompt.PromptTemplate;
import org.springframework.ai.document.Document;
import org.springframework.stereotype.Service;

import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class ChatbotService {

    private final ChatModel chatModel;
    private final VectorStoreService vectorStoreService;

    private static final String SYSTEM_PROMPT_TEMPLATE = """
            B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh gi√∫p tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n n·ªôi dung c√°c cu·ªën s√°ch.
            
            H∆∞·ªõng d·∫´n:
            - S·ª≠ d·ª•ng th√¥ng tin t·ª´ ng·ªØ c·∫£nh ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch
            - N·∫øu th√¥ng tin trong ng·ªØ c·∫£nh kh√¥ng ƒë·ªß ƒë·ªÉ tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß, h√£y n√≥i r√µ ƒëi·ªÅu ƒë√≥
            - Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
            - Tr√≠ch d·∫´n t√™n s√°ch v√† t√°c gi·∫£ khi c√≥ th·ªÉ
            - N·∫øu c√≥ nhi·ªÅu ngu·ªìn th√¥ng tin, h√£y t·ªïng h·ª£p m·ªôt c√°ch logic
            
            Ng·ªØ c·∫£nh t·ª´ c√°c cu·ªën s√°ch:
            {context}
            
            C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {question}
            
            Tr·∫£ l·ªùi:
            """;

    public String chat(String userQuestion) {
        try {
            log.info("Processing question: {}", userQuestion);

            // 1. Search for relevant documents
            List<Document> relevantDocs = vectorStoreService.searchSimilar(userQuestion);
            log.info("Found {} relevant documents", relevantDocs.size());

            // 2. Build context from relevant documents
            String context = buildContext(relevantDocs);

            // 3. Create prompt with template
            PromptTemplate promptTemplate = new PromptTemplate(SYSTEM_PROMPT_TEMPLATE);
            Prompt prompt = promptTemplate.create(Map.of(
                    "context", context,
                    "question", userQuestion
            ));

            // 4. Get response from ChatModel
            ChatResponse response = chatModel.call(prompt);
            String answer = response.getResult().getOutput().getText();

            log.info("Generated answer length: {} characters", answer.length());
            return answer;

        } catch (Exception e) {
            log.error("Error processing chat question: ", e);
            return "Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    }

    /**
     * Format documents khi tr·∫£ v·ªÅ cho AI - KH√îNG tr√πng l·∫∑p v·ªõi chunking
     */
    public String buildContext(List<Document> documents) {
        if (documents.isEmpty()) {
            return "Kh√¥ng c√≥ th√¥ng tin li√™n quan.";
        }

        // Group theo source ƒë·ªÉ tr√°nh duplicate
        Map<String, List<Document>> groupedBySource = documents.stream()
                .collect(Collectors.groupingBy(this::getSourceKey
                ));

        return groupedBySource.entrySet().stream()
                .map(this::formatSourceGroup)
                .collect(Collectors.joining("\n---\n"));
    }

    private String getSourceKey(Document doc) {
        String title = (String) doc.getMetadata().get("title");
        String author = (String) doc.getMetadata().get("author");
        return title + "|" + author;
    }

    private String formatSourceGroup(Map.Entry<String, List<Document>> entry) {
        List<Document> docs = entry.getValue();
        Document firstDoc = docs.get(0);

        String title = (String) firstDoc.getMetadata().get("title");
        String author = (String) firstDoc.getMetadata().get("author");

        // G·ªôp content c·ªßa c√°c chunks t·ª´ c√πng source
        String combinedContent = docs.stream()
                .map(Document::getFormattedContent)
                .collect(Collectors.joining(" "));

        // Remove duplicates v√† clean
        String cleanContent = removeDuplicateSentences(combinedContent);

        StringBuilder result = new StringBuilder();
        if (title != null && !"Unknown Title".equals(title)) {
            result.append("üìö ").append(title);
            if (author != null && !"Unknown Author".equals(author)) {
                result.append(" - ").append(author);
            }
            result.append("\\n ");
        }

        result.append(cleanContent);
        return result.toString();
    }

    /**
     * Lo·∫°i b·ªè c√¢u tr√πng l·∫∑p trong content
     */
    private String removeDuplicateSentences(String content) {
        String[] sentences = content.split("\\. ");
        Set<String> seen = new LinkedHashSet<>();

        for (String sentence : sentences) {
            String normalized = sentence.trim().toLowerCase();
            if (normalized.length() > 20) { // Ch·ªâ gi·ªØ c√¢u c√≥ √Ω nghƒ©a
                seen.add(sentence.trim());
            }
        }

        return String.join(". ", seen);
    }

//    private String buildContext(List<Document> documents) {
//        if (documents.isEmpty()) {
//            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong c∆° s·ªü d·ªØ li·ªáu.";
//        }
//
//        return documents.stream()
//                .map(this::formatDocumentForContext)
//                .collect(Collectors.joining("\\n---\\n"));
//
//    }
//
//    private String formatDocumentForContext(Document doc) {
//        String title = (String) doc.getMetadata().get("title");
//        String author = (String) doc.getMetadata().get("author");
//      //  String content = doc.getFormattedContent();
//        String content = cleanContent(doc.getFormattedContent());
//
//        StringBuilder formatted = new StringBuilder();
//
//        if (title != null && !title.equals("Unknown Title")) {
//            formatted.append("S√°ch: ").append(title).append("  ");
//        }
//
//        if (author != null && !author.equals("Unknown Author")) {
//            formatted.append("T√°c gi·∫£: ").append(author).append("\\n");
//        }
//
//        formatted.append("N·ªôi dung: ").append(content);
//
//        return formatted.toString();
//    }
//
//    private String cleanContent(String content) {
//        if (content == null) return "";
//        return content
//                .replaceAll("\\\\n", "\n")  // Chuy·ªÉn \\n th√†nh \n th·∫≠t
//                .replaceAll("\n+", " ")     // Thay nhi·ªÅu \n b·∫±ng space
//                .replaceAll("\\s+", " ")    // X√≥a multiple spaces
//                .trim();
//    }
}
